<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd ">

	<!-- 
	  1：搭建Spring的开发环境
	  
	  		1.1：添加配置文件和相应的spirng-3.2-core.jar 包
	  		1.2：创建Date对象，如果成功Spring环境ok
	  		1.3：通过基于Spring JUnit测试实例化Date
	  		
	  2:搭建Hibernate的开发环境
	  		2.1：添加配置文件和相应的 Hibernate3.6。jar+mysql包
	  		2.2：分析cn.it.shop.util.HibernateSessionFactory的作用:加载Hibernate配置文件,创建session
	  		2.3通过表逆向生成mode、orm映射文件
	  		2.4:创建service,通过new方式执行数据入库
	  		
	  3:Spring与Hibernate整合(采用AOP来管理事务实现申明式事务)
	 		3.1:添加spring-3.2-aop。jar spring-3.2-persistence.jar c3p0.jar
	 		3.2:配置数据源com.mchange.v2.c3p0.ComboPooledDataSource
	 		3.3:采用LocalSessionFactoryBean 取代HibernateTemplate
	 		3.4:配置事务管理器，管理SessionFactory,所有session将会有申明式事务
	 		3.5:配置advice(通知)通知是指定了哪类方法需要什么类型的事务模式    需要	xmlns:tx="http://www.springframework.org/schema/tx 和http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"
	 		3.6:配置AOP的切面表达式    	xmlns:aop="http://www.springframework.org/schema/aop 和http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	 		3.7:让Service让Spring管理，并且依赖sessionFactory,如果能插入数据，则说明声明事务ok
	 		
	 4:搭建Struts的开发环境	
	 		4.1:添加配置文件和相应struts-2.3.jar 并且在web.xml中配置StrutsPrepareAndExecuteFilter
	 		4.2:创建Action并且配置到Struts。xml中
	 		4.3:通过jsp访问action .如果action可以创建，则单独的Struts可以使用
	 		4.4:默认在没有整合的时候创建Action的工厂为：(struts) for (com.opensymphony.xwork2.ObjectFactory)
	 
	 5:创建Spring和Struts整合环境(采用spring来管理Action,这样Action的依赖就能注入进来)
	 	5.1:加载配置文件和包 spring-web.jar 里面包含struts2-spring-plugin-2.1.6.jar
	 	5.2:把Action 交给Spring管理  配置在:applicationContext-action.xml
	 	5.3:在Struts。xml中class对应得是spring中配置action的id值
	 	5.4:在web.xml中配置监听器ContextLoaderListener，启动的时候加载spring配置文件
	 		 	-->	 
  
  
   <!-- 开启注解扫描 -->
   <context:component-scan base-package="cn.it.shop.."></context:component-scan>
   <!--所有Properties文件应该交给Spring管理，而且启动时加载，Spring支持两种方式，
   property-placeholder 仅仅在xml配置中使用 -->
   <bean  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
   	<property name="locations">
   		<array>
   			<value>classpath:conn.properties</value>
   		</array>
   	</property>
   </bean>
   
   <!-- 仅仅支持注释注入 -->
   <bean id="prop" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
   	<property name="locations">
   		<array>
   			<value>classpath:public.properties</value>
   		</array>
   	</property>
   </bean>
   
  
   <!--  <context:property-placeholder location="classpath:conn.properties"/> -->
   
   
    <!-- 数据库连接密码解密 继承org.springframework.beans.factory.config.PropertyPlaceholderConfigurer实现加密-->
   	<!-- 
   	<bean class="cn.it.shop.util.ConvertPwdPropertyConfigurer" p:location="classpath:jdbc.properties"
  		p:fileEncoding="utf-8"
  	/>
  	 -->
  	

	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/shop"></property>
		<property name="user" value="root"></property>
		<property name="password" value="root"></property>
	</bean> -->
	
	<bean id="date" class="java.util.Date"></bean>
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	 	<property name="jdbcUrl" value="${jdbcUrl}" />
	 	<property name="user" value="${user}" />
	 	<property name="password" value="${password}" />
	 	<property name="driverClass" value="${driverClass}" />
	 </bean>
	
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		配置文件
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		依赖于数据源
		<property name="dataSource" ref="dataSource"></property>
	</bean> -->
	
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	 	<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	 	<!-- 可以删除hiberbante 相关链接配置 -->
	 	<property name="dataSource" ref="dataSource" />
	 </bean>
	
	<!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
	 	<!--  创建事务管理器, 管理sessionFactory(因为所有的session都是从sessionFactory获取的) -->
	 	<property name="sessionFactory" ref="sessionFactory" />
	 </bean>
	
	 <!-- 配置通知, 那些方法需要切入什么类型的事务 -->	 
	 <tx:advice id="advice" transaction-manager="transactionManager">
	 	<tx:attributes>
	 		<!-- REQUIRED: 必须的, 如果当前上下文有事务,则直接使用,否则就创建一个新事务 
		 		<tx:method name="get*" propagation="SUPPORTS"/>
		 		<tx:method name="list*" propagation="SUPPORTS"/>
		 		<tx:method name="*" propagation="REQUIRED"/>
	 		-->
	 		<tx:method name="save*" propagation="REQUIRED"/>
	 		<tx:method name="update*" propagation="REQUIRED"/>
	 		<tx:method name="delete*" propagation="REQUIRED"/>
	 		<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
	 	</tx:attributes>
	 </tx:advice>
	
	<!-- 配置切面表达式, 并且让 tx与切面表达式合二为一 -->
	 <aop:config>
	 	<!-- 表达式, 定义哪个包的哪些类需要切入事务,但是此处并且没有制定类中哪些方法,需要切入什么样 事务 cn.it.shop.service.impl 包下类的所有方法都切入事务 -->
	 	<aop:pointcut expression="execution(* cn.it.shop.service.impl.*.*(..))" id="pointcut" />
	 	<aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
	 </aop:config>
	
</beans>